{
  "info": {
    "name": "Falsafa Raqamia API Collection",
    "description": "Complete API testing collection for Orders and Webhooks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://127.0.0.1:8000",
      "type": "string"
    },
    {
      "key": "order_uuid_1",
      "value": "000016c8-3b8b-429c-96d1-1054a3b871cb",
      "type": "string"
    },
    {
      "key": "order_uuid_2",
      "value": "5f9ad0e9-3420-463a-be3b-9ade4c8dc5db",
      "type": "string"
    },
    {
      "key": "order_uuid_3",
      "value": "019956a9-fdda-73dd-a1be-6cdaf6ab2490",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Orders API",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Get all orders with default pagination"
          },
          "response": []
        },
        {
          "name": "Get Orders with Filters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?status=paid&per_page=5&sort_by=amount&sort_order=desc",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "status",
                  "value": "paid"
                },
                {
                  "key": "per_page",
                  "value": "5"
                },
                {
                  "key": "sort_by",
                  "value": "amount"
                },
                {
                  "key": "sort_order",
                  "value": "desc"
                }
              ]
            },
            "description": "Get orders filtered by status, sorted by amount descending"
          },
          "response": []
        },
        {
          "name": "Get Orders by User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?user_id=1&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "user_id",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get orders for a specific user"
          },
          "response": []
        },
        {
          "name": "Get Orders with External Transaction ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?has_external_txn_id=true&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "has_external_txn_id",
                  "value": "true"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get orders that have external transaction IDs"
          },
          "response": []
        },
        {
          "name": "Get Orders by Date Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?date_from=2025-01-01&date_to=2025-12-31&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "date_from",
                  "value": "2025-01-01"
                },
                {
                  "key": "date_to",
                  "value": "2025-12-31"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get orders within a specific date range"
          },
          "response": []
        },
        {
          "name": "Get Orders by Amount Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?amount_min=100&amount_max=1000&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "amount_min",
                  "value": "100"
                },
                {
                  "key": "amount_max",
                  "value": "1000"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "Get orders within a specific amount range"
          },
          "response": []
        },
        {
          "name": "Get Specific Order",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_uuid_1}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_uuid_1}}"]
            },
            "description": "Get details of a specific order by UUID"
          },
          "response": []
        },
        {
          "name": "Get Order Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_uuid_1}}/events?per_page=20",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_uuid_1}}", "events"],
              "query": [
                {
                  "key": "per_page",
                  "value": "20"
                }
              ]
            },
            "description": "Get events for a specific order"
          },
          "response": []
        },
        {
          "name": "Get Non-existent Order (404 Test)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test 404 response for non-existent order"
          },
          "response": []
        }
      ],
      "description": "Orders API endpoints for retrieving order data"
    },
    {
      "name": "Webhook API",
      "item": [
        {
          "name": "Payment Success Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-POSTMAN-TEST-001\",\n  \"status\": \"paid\",\n  \"amount\": 150.00,\n  \"timestamp\": \"2025-09-17T10:00:00Z\",\n  \"metadata\": {\n    \"payment_method\": \"credit_card\",\n    \"processor\": \"stripe\",\n    \"processor_txn_id\": \"pi_1234567890\",\n    \"card_last4\": \"4242\",\n    \"card_brand\": \"visa\"\n  },\n  \"webhook_source\": \"stripe\",\n  \"correlation_id\": \"corr-001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test successful payment webhook"
          },
          "response": []
        },
        {
          "name": "Payment Failed Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_2}}\",\n  \"txn_id\": \"TXN-POSTMAN-TEST-002\",\n  \"status\": \"failed\",\n  \"amount\": 75.50,\n  \"timestamp\": \"2025-09-17T10:05:00Z\",\n  \"metadata\": {\n    \"error_code\": \"card_declined\",\n    \"error_message\": \"Your card was declined\",\n    \"processor\": \"stripe\"\n  },\n  \"webhook_source\": \"stripe\",\n  \"correlation_id\": \"corr-002\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test failed payment webhook"
          },
          "response": []
        },
        {
          "name": "Refund Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_3}}\",\n  \"txn_id\": \"TXN-POSTMAN-TEST-003\",\n  \"status\": \"refunded\",\n  \"amount\": 200.00,\n  \"timestamp\": \"2025-09-17T10:10:00Z\",\n  \"metadata\": {\n    \"refund_reason\": \"customer_request\",\n    \"refund_amount\": 200.00,\n    \"processor\": \"stripe\",\n    \"refund_id\": \"re_1234567890\"\n  },\n  \"webhook_source\": \"stripe\",\n  \"correlation_id\": \"corr-003\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test refund webhook"
          },
          "response": []
        },
        {
          "name": "Retry Payment Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-POSTMAN-TEST-004\",\n  \"status\": \"pending\",\n  \"amount\": 150.00,\n  \"timestamp\": \"2025-09-17T10:15:00Z\",\n  \"metadata\": {\n    \"retry_attempt\": 1,\n    \"previous_txn_id\": \"TXN-POSTMAN-TEST-001\",\n    \"processor\": \"stripe\"\n  },\n  \"webhook_source\": \"stripe\",\n  \"correlation_id\": \"corr-004\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test retry payment webhook"
          },
          "response": []
        },
        {
          "name": "Duplicate Webhook Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-DUPLICATE-TEST\",\n  \"status\": \"paid\",\n  \"amount\": 100.00,\n  \"timestamp\": \"2025-09-17T10:20:00Z\",\n  \"metadata\": {\n    \"test\": \"duplicate\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test duplicate webhook handling - run this twice to test duplicate detection"
          },
          "response": []
        },
        {
          "name": "Invalid Status Transition Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-INVALID-TEST\",\n  \"status\": \"pending\",\n  \"amount\": 100.00,\n  \"timestamp\": \"2025-09-17T10:25:00Z\",\n  \"metadata\": {\n    \"test\": \"invalid_transition\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test invalid status transition (should be ignored)"
          },
          "response": []
        },
        {
          "name": "Invalid Webhook Data Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_uuid\": \"invalid-uuid\",\n  \"txn_id\": \"TXN-INVALID-DATA\",\n  \"status\": \"invalid_status\",\n  \"amount\": -100,\n  \"timestamp\": \"invalid-date\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "payments"]
            },
            "description": "Test validation errors with invalid data"
          },
          "response": []
        }
      ],
      "description": "Webhook API endpoints for payment processing"
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Scenario 1: Complete Payment Flow",
          "item": [
            {
              "name": "1. Create Pending Order",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-SCENARIO-001\",\n  \"status\": \"pending\",\n  \"amount\": 250.00,\n  \"timestamp\": \"2025-09-17T11:00:00Z\",\n  \"metadata\": {\n    \"scenario\": \"complete_flow\",\n    \"step\": \"create_pending\"\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/webhooks/payments",
                  "host": ["{{base_url}}"],
                  "path": ["api", "webhooks", "payments"]
                }
              }
            },
            {
              "name": "2. Process Payment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order_uuid\": \"{{order_uuid_1}}\",\n  \"txn_id\": \"TXN-SCENARIO-001\",\n  \"status\": \"paid\",\n  \"amount\": 250.00,\n  \"timestamp\": \"2025-09-17T11:01:00Z\",\n  \"metadata\": {\n    \"scenario\": \"complete_flow\",\n    \"step\": \"process_payment\",\n    \"processor\": \"stripe\"\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/webhooks/payments",
                  "host": ["{{base_url}}"],
                  "path": ["api", "webhooks", "payments"]
                }
              }
            },
            {
              "name": "3. Check Order Status",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/orders/{{order_uuid_1}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "orders", "{{order_uuid_1}}"]
                }
              }
            },
            {
              "name": "4. Check Order Events",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/orders/{{order_uuid_1}}/events",
                  "host": ["{{base_url}}"],
                  "path": ["api", "orders", "{{order_uuid_1}}", "events"]
                }
              }
            }
          ],
          "description": "Complete payment flow scenario"
        },
        {
          "name": "Scenario 2: Payment Failure and Retry",
          "item": [
            {
              "name": "1. Initial Payment Failure",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order_uuid\": \"{{order_uuid_2}}\",\n  \"txn_id\": \"TXN-SCENARIO-002-FAIL\",\n  \"status\": \"failed\",\n  \"amount\": 150.00,\n  \"timestamp\": \"2025-09-17T11:10:00Z\",\n  \"metadata\": {\n    \"scenario\": \"failure_retry\",\n    \"step\": \"initial_failure\",\n    \"error\": \"insufficient_funds\"\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/webhooks/payments",
                  "host": ["{{base_url}}"],
                  "path": ["api", "webhooks", "payments"]
                }
              }
            },
            {
              "name": "2. Retry Payment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order_uuid\": \"{{order_uuid_2}}\",\n  \"txn_id\": \"TXN-SCENARIO-002-RETRY\",\n  \"status\": \"paid\",\n  \"amount\": 150.00,\n  \"timestamp\": \"2025-09-17T11:15:00Z\",\n  \"metadata\": {\n    \"scenario\": \"failure_retry\",\n    \"step\": \"retry_success\",\n    \"retry_attempt\": 1\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/webhooks/payments",
                  "host": ["{{base_url}}"],
                  "path": ["api", "webhooks", "payments"]
                }
              }
            },
            {
              "name": "3. Check Final Status",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/orders/{{order_uuid_2}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "orders", "{{order_uuid_2}}"]
                }
              }
            }
          ],
          "description": "Payment failure and retry scenario"
        },
        {
          "name": "Scenario 3: Refund Process",
          "item": [
            {
              "name": "1. Process Refund",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order_uuid\": \"{{order_uuid_3}}\",\n  \"txn_id\": \"TXN-SCENARIO-003-REFUND\",\n  \"status\": \"refunded\",\n  \"amount\": 300.00,\n  \"timestamp\": \"2025-09-17T11:20:00Z\",\n  \"metadata\": {\n    \"scenario\": \"refund_process\",\n    \"refund_reason\": \"customer_request\",\n    \"refund_amount\": 300.00\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/webhooks/payments",
                  "host": ["{{base_url}}"],
                  "path": ["api", "webhooks", "payments"]
                }
              }
            },
            {
              "name": "2. Verify Refund",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/orders/{{order_uuid_3}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "orders", "{{order_uuid_3}}"]
                }
              }
            }
          ],
          "description": "Refund process scenario"
        }
      ],
      "description": "Complete test scenarios for end-to-end testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic timestamps",
          "const now = new Date().toISOString();",
          "pm.globals.set('current_timestamp', now);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log response details",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Time:', pm.response.responseTime + 'ms');",
          "",
          "// Test for successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('✅ Request successful');",
          "} else {",
          "    console.log('❌ Request failed');",
          "}"
        ]
      }
    }
  ]
}
